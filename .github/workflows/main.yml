
name: 'CI Release'

on:
    release:
      types: [published]

env:
  PRODUCT_NAME: 'obs-rtspserver'
  QT_VERSION_MAC: '5.15.2'
  QT_HASH_MAC: 'a09690095d16b3f476ae6e0f5bf3154effcd6571738c1c40f8abbb83676d2afb'
  QT_VERSION_WIN: '5.15.2'
  DEPS_VERSION_MAC: '2021-08-17'
  DEPS_HASH_MAC: 'fc6b356572c4703d56f5b2deb98e46cddffb29a0d36c988702dd76329efe7072'
  DEPS_VERSION_WIN: '2019'
  NSIS_VERSION_WIN: '3.08'
jobs:
  get_obs_info:
    name: '01 - Get obs-studio git info'
    runs-on: [ubuntu-latest]
    outputs:
      git_branch: ${{ steps.get_info.outputs.git_branch }}
      git_hash: ${{ steps.get_info.outputs.git_hash }}
      git_tag: ${{ steps.get_info.outputs.git_tag }}
    steps:
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          fetch-depth: 0
          submodules: 'recursive'
          
      - name: 'Get OBS-Studio git info'
        id: get_info
        shell: bash
        working-directory: 'obs-studio'
        run: |
          echo ::set-output name=git_branch::`git rev-parse --abbrev-ref HEAD`
          echo ::set-output name=git_hash::`git rev-parse --short HEAD`
          echo ::set-output name=git_tag::`git describe --tags --abbrev=0`
          
  get_plugin_info:
    name: '01 - Get plugin git info'
    runs-on: [ubuntu-latest]
    outputs:
      git_tag: ${{ steps.get_info.outputs.git_tag }}
    steps:    
      - name: 'Get plugin git info'
        id: get_info
        shell: bash
        run: |
          export GIT_TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=git_tag::${GIT_TAG}
          
  clang_check:
    name: '02 - Code format check'
    runs-on: [ubuntu-latest]
    needs: [get_obs_info, get_plugin_info]
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'

      - name: 'Install clang-format'
        run: sudo apt-get install -y clang-format-12

      #- name: 'Run clang-format'
      #  run: |
      #    ./CI/formatcode.sh
      #    ./CI/check-format.sh
          
  windows_build:
    name: '03 - Windows (Latest)'
    runs-on: [windows-latest]
    needs: [get_obs_info, get_plugin_info, clang_check]
    strategy:
      matrix:
        arch: [64, 32]
    env:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'
          
      - name: 'Checkout OBS v${{ needs.get_obs_info.outputs.git_tag }}'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          ref: '${{ needs.get_obs_info.outputs.git_tag }}'
          fetch-depth: 0
          submodules: 'recursive'
      
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/01_install_dependencies.ps1 -BuildArch ${{ matrix.arch }}-bit -NoChoco -InstallList "obs-deps","qt-deps","obs-studio"
        
      - name: 'Build libobs and obs-frontend-api'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/02_build_obs_libs.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Build plugin'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/03_build_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Create build artifact'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/04_package_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-${{ matrix.arch }}'
          path: '${{ github.workspace }}/plugin/*-windows-*.zip'
          
  windows_package:
    name: '04 - Windows Installer'
    runs-on: [windows-latest]
    needs: [get_plugin_info, windows_build]
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'
          
      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-64'
          path: 'plugin'

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-32'
          path: 'plugin'
          
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/01_install_dependencies.ps1 -BuildArch 64-bit -NoChoco -InstallList "nsis"
          
      - name: 'Build NSIS installer'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          Get-ChildItem -Filter "*-windows-x86.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          Get-ChildItem -Filter "*-windows-x64.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          CI/windows/04_package_plugin.ps1 -BuildArch 64-bit -BuildInstaller -CombinedArchs
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-release'
          path: '${{ github.workspace }}/plugin/${{ env.PRODUCT_NAME }}-*-windows-all*.*'

  linux_build:
    name: '03 - Linux (Ubuntu)'
    runs-on: ${{ matrix.ubuntu }}
    needs: [get_obs_info, get_plugin_info, clang_check]
    strategy:
      matrix:
        ubuntu: ['ubuntu-20.04']
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'
          
      - name: 'Checkout OBS v${{ needs.get_obs_info.outputs.git_tag }}'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          ref: '${{ needs.get_obs_info.outputs.git_tag }}'
          fetch-depth: 0
          submodules: 'recursive'
          
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          source CI/linux/01_install_dependencies.sh --disable-pipewire
        
      - name: 'Build libobs and obs-frontend-api'
        working-directory: 'plugin'
        run: |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          source CI/linux/02_build_obs_libs.sh --disable-pipewire
        
      - name: 'Build plugin'
        working-directory: 'plugin'
        run: |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          source CI/linux/03_build_plugin.sh
        
      - name: 'Create build artifact'
        working-directory: 'plugin'
        run: |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          source CI/linux/04_package_plugin.sh

      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-linux-${{ matrix.ubuntu }}'
          path: '${{ github.workspace }}/plugin/build/${{ env.PRODUCT_NAME }}-*-linux.*'
          
  macos_build:
    name: '03 - macOS (Latest)'
    runs-on: [macos-latest]
    strategy:
      matrix:
        arch: ['x86_64']
    needs: [get_obs_info, get_plugin_info, clang_check]
    env:
      MACOSX_DEPLOYMENT_TARGET: '10.13'
      BLOCKED_FORMULAS: 'speexdsp'
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'
          
      - name: 'Checkout OBS v${{ needs.get_obs_info.outputs.git_tag }}'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          ref: '${{ needs.get_obs_info.outputs.git_tag }}'
          fetch-depth: 0
          submodules: 'recursive'

      - name: 'Setup build environment'
        run: |
          REMOVE_FORMULAS=""
          for FORMULA in ${{ env.BLOCKED_FORMULAS }}; do
            if [ -d "/usr/local/opt/${FORMULA}" ]; then
              REMOVE_FORMULAS="${REMOVE_FORMULAS}${FORMULA} "
            fi
          done
          if [ -n "${REMOVE_FORMULAS}" ]; then
            brew uninstall ${REMOVE_FORMULAS}
          fi

      - name: 'Install dependencies'
        run:  |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          export MACOS_DEPS_VERSION="${{ env.DEPS_VERSION_MAC }}"
          export MACOS_DEPS_HASH="${{ env.DEPS_HASH_MAC }}"
          export QT_HASH="${{ env.QT_HASH_MAC }}"
          export MACOSX_DEPLOYMENT_TARGET="${{ env.MACOSX_DEPLOYMENT_TARGET }}"
          source CI/macos/01_install_dependencies.sh --architecture "${{ matrix.arch }}"

      - name: 'Build libobs and obs-frontend-api'
        working-directory: 'plugin'
        run:  |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          export MACOS_DEPS_VERSION="${{ env.DEPS_VERSION_MAC }}"
          export MACOS_DEPS_HASH="${{ env.DEPS_HASH_MAC }}"
          export QT_HASH="${{ env.QT_HASH_MAC }}"
          export MACOSX_DEPLOYMENT_TARGET="${{ env.MACOSX_DEPLOYMENT_TARGET }}"
          source CI/macos/02_build_obs-libs.sh --architecture "${{ matrix.arch }}"

      - name: 'Build plugin'
        working-directory: 'plugin'
        run:  |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          export MACOS_DEPS_VERSION="${{ env.DEPS_VERSION_MAC }}"
          export MACOS_DEPS_HASH="${{ env.DEPS_HASH_MAC }}"
          export QT_HASH="${{ env.QT_HASH_MAC }}"
          export MACOSX_DEPLOYMENT_TARGET="${{ env.MACOSX_DEPLOYMENT_TARGET }}"
          source CI/macos/03_build_plugin.sh --codesign --architecture "${{ matrix.arch }}"

      - name: 'Create build artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        working-directory: 'plugin'
        run:  |
          export OBS_VERSION="${{ needs.get_obs_info.outputs.git_tag }}"
          export MACOS_DEPS_VERSION="${{ env.DEPS_VERSION_MAC }}"
          export MACOS_DEPS_HASH="${{ env.DEPS_HASH_MAC }}"
          export QT_HASH="${{ env.QT_HASH_MAC }}"
          export MACOSX_DEPLOYMENT_TARGET="${{ env.MACOSX_DEPLOYMENT_TARGET }}"
          source CI/macos/04_package_plugin.sh --codesign --architecture "${{ matrix.arch }}"

      - name: 'Upload build Artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-macos-${{ matrix.arch }}'
          path: '${{ github.workspace }}/plugin/*-macos.pkg'
            
  make-release:
    name: '05 - Upload release files'
    runs-on: [ubuntu-latest]
    needs: [get_plugin_info, windows_package, linux_build, macos_build]
    steps:
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag }}-windows-all.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag }}-windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag }}-windows-all-installer.exe
          asset_name: ${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag }}-windows-installer.exe
          asset_content_type: application/x-msdownload
      - name: 'Upload linux .tar.gz artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-linux-ubuntu-20.04/obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-linux.tar.gz
          asset_name: obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-linux.tar.gz
          asset_content_type: application/x-gzip
      - name: 'Upload linux .deb artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-linux-ubuntu-20.04/obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-linux.deb
          asset_name: obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: 'Upload macos .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ needs.get_plugin_info.outputs.git_tag }}-macos/obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-macos.zip
          asset_name: obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-macos.zip
          asset_content_type: application/zip
      - name: 'Upload macos .pkg artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ needs.get_plugin_info.outputs.git_tag }}-macos/obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-macos.pkg
          asset_name: obs-rtspserver-${{ needs.get_plugin_info.outputs.git_tag }}-macos.pkg
          asset_content_type: application/vnd.apple.installer+xml
