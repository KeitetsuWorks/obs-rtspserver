
name: 'CI Release'

on:
    release:
      types: [published]

env:
  PRODUCT_NAME: 'obs-rtspserver'
  QT_VERSION_MAC: '5.15.2'
  QT_HASH_MAC: 'a09690095d16b3f476ae6e0f5bf3154effcd6571738c1c40f8abbb83676d2afb'
  QT_VERSION_WIN: '5.15.2'
  DEPS_VERSION_MAC: '2021-08-17'
  DEPS_HASH_MAC: 'fc6b356572c4703d56f5b2deb98e46cddffb29a0d36c988702dd76329efe7072'
  DEPS_VERSION_WIN: '2019'
  NSIS_VERSION_WIN: '3.08'
jobs:
  get_obs_info:
    name: '01 - Get obs-studio git info'
    runs-on: [ubuntu-latest]
    outputs:
      git_branch: ${{ steps.get_info.outputs.git_branch }}
      git_hash: ${{ steps.get_info.outputs.git_hash }}
      git_tag: ${{ steps.get_info.outputs.git_tag }}
    steps:
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          fetch-depth: 0
          submodules: 'recursive'
          
      - name: 'Get OBS-Studio git info'
        id: get_info
        shell: bash
        working-directory: 'obs-studio'
        run: |
          echo ::set-output name=git_branch::`git rev-parse --abbrev-ref HEAD`
          echo ::set-output name=git_hash::`git rev-parse --short HEAD`
          echo ::set-output name=git_tag::`git describe --tags --abbrev=0`
          
  get_plugin_info:
    name: '01 - Get plugin git info'
    runs-on: [ubuntu-latest]
    outputs:
      git_tag: ${{ steps.get_info.outputs.git_tag }}
    steps:    
      - name: 'Get plugin git info'
        id: get_info
        shell: bash
        run: |
          export GIT_TAG=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=git_tag::${GIT_TAG}
          
  clang_check:
    name: '02 - Code Format Check'
    runs-on: [ubuntu-latest]
    needs: [get_obs_info, get_plugin_info]
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'

      - name: 'Install clang-format'
        run: sudo apt-get install -y clang-format-12

      #- name: 'Run clang-format'
      #  run: |
      #    ./CI/formatcode.sh
      #    ./CI/check-format.sh
          
  windows_build:
    name: '03 - Windows (Latest)'
    runs-on: [windows-latest]
    needs: [get_obs_info, get_plugin_info, clang_check]
    strategy:
      matrix:
        arch: [64, 32]
    env:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag }}'
          submodules: 'recursive'
          
      - name: 'Checkout OBS v${{ needs.get_obs_info.outputs.git_tag }}'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          ref: '${{ needs.get_obs_info.outputs.git_tag }}'
          fetch-depth: 0
          submodules: 'recursive'
      
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/01_install_dependencies.ps1 -BuildArch ${{ matrix.arch }}-bit -NoChoco -InstallList "obs-deps","qt-deps","obs-studio"
        
      - name: 'Build libobs and obs-frontend-api'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/02_build_obs_libs.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Build plugin'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/03_build_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Create build artifact'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/04_package_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-${{ matrix.arch }}'
          path: '${{ github.workspace }}/plugin/*-windows-*.zip'
          
  windows_package:
    name: '03 - Windows Installer'
    runs-on: [windows-latest]
    needs: [windows_build]
    steps:
      - name: 'Checkout plugin ${{ env.GIT_TAG }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ env.GIT_TAG }}'
          submodules: 'recursive'
          
      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-64'
          path: 'plugin'

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-32'
          path: 'plugin'
          
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          CI/windows/01_install_dependencies.ps1 -BuildArch 64-bit -NoChoco -InstallList "nsis"
          
      - name: 'Build NSIS installer'
        working-directory: 'plugin'
        run: |
          $env:WindowsDepsVersion = "${{ env.DEPS_VERSION_WIN }}"
          $env:WindowsQtVersion = "${{ env.QT_VERSION_WIN }}"
          $env:ObsVersion = "${{ needs.get_obs_info.outputs.git_tag }}"
          $env:NSISVersion = "${{ env.NSIS_VERSION_WIN }}"
          Get-ChildItem -Filter "*-windows-x86.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          Get-ChildItem -Filter "*-windows-x64.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          CI/windows/04_package_plugin.ps1 -BuildArch 64-bit -BuildInstaller -CombinedArchs
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-release'
          path: '${{ github.workspace }}/plugin/${{ env.PRODUCT_NAME }}-*-windows-all-installer.exe'

  linux_build:
    name: 'Linux 64bit'
    runs-on: [ubuntu-latest]
    needs: [clang_check]
    steps:
      - name: 'Install prerequisite'
#         sudo dpkg --add-architecture i386
        run: |
          sudo add-apt-repository ppa:jan-koester/pipewiremaster
          sudo apt-get update
          sudo apt-get install \
           build-essential checkinstall cmake git libmbedtls-dev libasound2-dev libavcodec-dev libavdevice-dev \
           libavfilter-dev libavformat-dev libavutil-dev libcurl4-openssl-dev libfdk-aac-dev libfontconfig-dev \
           libfreetype6-dev libgl1-mesa-dev libjack-jackd2-dev libjansson-dev libluajit-5.1-dev libpulse-dev \
           libqt5x11extras5-dev libspeexdsp-dev libswresample-dev libswscale-dev libudev-dev libv4l-dev \
           libvlc-dev libx11-dev libx264-dev libxcb-shm0-dev libxcb-xinerama0-dev libxcomposite-dev \
           libxinerama-dev pkg-config python3-dev qtbase5-dev libqt5svg5-dev swig libxcb-randr0-dev \
           libx11-xcb-dev libxcb-xfixes0-dev \
           libwayland-dev libpipewire-0.3-dev qtbase5-private-dev
#           libxcb-xfixes0-dev libx11-xcb-dev libxcb1-dev \
#           libx32gcc-4.8-dev libc6-dev-i386 lib32stdc++6 g++-multilib gcc-multilib \
#           libmbedtls-dev:i386 libasound2-dev:i386 libavcodec-dev:i386 libavdevice-dev:i386 \
#           libavfilter-dev:i386 libavformat-dev:i386 libavutil-dev:i386 libcurl4-openssl-dev:i386 libfdk-aac-dev:i386 libfontconfig-dev:i386 \
#           libfreetype6-dev:i386 libgl1-mesa-dev:i386 libjack-jackd2-dev:i386 libjansson-dev libluajit-5.1-dev:i386 libpulse-dev:i386 \
#           libqt5x11extras5-dev:i386 libspeexdsp-dev:i386 libswresample-dev:i386 libswscale-dev:i386 libudev-dev:i386 libv4l-dev:i386 \
#           libvlc-dev:i386 libx11-dev:i386 libx264-dev:i386 libxcb-shm0-dev:i386 libxcb-xinerama0-dev:i386 libxcomposite-dev:i386 \
#           libxinerama-dev:i386 qtbase5-dev:i386 libqt5svg5-dev:i386 libxcb-randr0-dev:i386 \
#           libxcb-xfixes0-dev:i386 libx11-xcb-dev:i386 libxcb1-dev:i386
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo OBS_GIT_BRANCH=`git rev-parse --abbrev-ref HEAD` >> $GITHUB_ENV
          echo OBS_GIT_HASH=`git rev-parse --short HEAD` >> $GITHUB_ENV
          echo OBS_GIT_TAG=`git describe --tags --abbrev=0` >> $GITHUB_ENV
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Checkout obs-rtspserver'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
          submodules: 'recursive'
      - name: 'Get obs-rtspserver tag'
        shell: bash
        run: |
          export GIT_TAG=${GITHUB_REF/refs\/tags\//}
          echo GIT_TAG=${GIT_TAG} >> $GITHUB_ENV
          echo TAG_VERSION=${GIT_TAG#v} >> $GITHUB_ENV
      - name: 'Checkout obs-rtspserver release (${{ env.GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
        run: |
          git checkout ${{ env.GIT_TAG }}
          git submodule update
      - name: 'Add obs-rtspserver Subdirectory'
        working-directory: ${{ github.workspace }}/obs-studio/plugins
        run: echo "add_subdirectory(obs-rtspserver)" >> ./CMakeLists.txt
#      - name: 'Configure OBS 32-bit'
#        working-directory: ${{ github.workspace }}/obs-studio
#        run: |
#          mkdir ./build32
#          cd ./build32
#          cmake -D CMAKE_CXX_FLAGS=-m32 -D CMAKE_C_FLAGS=-m32 -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
#      - name: 'Build obs-rtspserver 32-bit'
#        working-directory: ${{ github.workspace }}/obs-studio/build32/plugins/obs-rtspserver/
#        run: |
#          make -j4
      - name: 'Configure OBS 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir ./build64
          cd ./build64
          cmake -DENABLE_WAYLAND=OFF -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr -DDISABLE_PYTHON="ON" -DBUILD_BROWSER=OFF -DENABLE_PIPEWIRE=OFF ..
      - name: 'Build obs-rtspserver 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio/build64/plugins/obs-rtspserver/
        run: |
          make -j4
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-rtspserver-${{ env.GIT_TAG }}-linux"
          echo LINUX_FILENAME=$FILENAME >> $GITHUB_ENV
      - name: 'Package obs-rtspserver'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p build-package/obs-rtspserver/bin/64bit
          mkdir -p build-package/obs-rtspserver/data
          cp ./obs-studio/build64/plugins/obs-rtspserver/obs-rtspserver.so ./build-package/obs-rtspserver/bin/64bit/
          cp -r ./obs-studio/plugins/obs-rtspserver/data/* ./build-package/obs-rtspserver/data/
          mkdir release
          tar zcvf "./release/${{ env.LINUX_FILENAME }}.tar.gz" -C "./build-package" .
      - name: 'Publish files'
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.GIT_TAG }}-linux'
          path: ${{ github.workspace }}/release/*
          
  macos_build:
    name: 'Mac OS 64bit'
    runs-on: [macos-latest]
    needs: [clang_check]
    steps:
      - name: 'Install brew'
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      - name: 'Install prerequisite'
        run: |
            rm -rf '/usr/local/bin/2to3'
            brew install ffmpeg x264 qt5 packages
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo OBS_GIT_BRANCH=`git rev-parse --abbrev-ref HEAD` >> $GITHUB_ENV
          echo OBS_GIT_HASH=`git rev-parse --short HEAD` >> $GITHUB_ENV
          echo OBS_GIT_TAG=`git describe --tags --abbrev=0` >> $GITHUB_ENV
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Checkout obs-rtspserver'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
          submodules: 'recursive'
      - name: 'Get obs-rtspserver tag'
        shell: bash
        run: |
          export GIT_TAG=${GITHUB_REF/refs\/tags\//}
          echo GIT_TAG=${GIT_TAG} >> $GITHUB_ENV
          echo TAG_VERSION=${GIT_TAG#v} >> $GITHUB_ENV
      - name: 'Checkout obs-rtspserver release (${{ env.GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
        run: |
          git checkout ${{ env.GIT_TAG }}
          git submodule update
      - name: 'Add obs-rtspserver Subdirectory'
        working-directory: ${{ github.workspace }}/obs-studio/plugins
        run: echo "add_subdirectory(obs-rtspserver)" >> ./CMakeLists.txt
      - name: 'Configure OBS 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir ./build64
          cd ./build64
          cmake -DQTDIR="/usr/local/opt/qt@5" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15" -DDISABLE_PYTHON="ON" -DBUILD_BROWSER=OFF ..
      - name: 'Build obs-rtspserver 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio/build64/plugins/obs-rtspserver/
        run: |
          make -j4
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-rtspserver-${{ env.GIT_TAG }}-macos"
          echo MACOS_FILENAME=$FILENAME >> $GITHUB_ENV
      - name: 'Package obs-rtspserver'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p build-package/obs-rtspserver/bin
          mkdir -p build-package/obs-rtspserver/data
          cp ./obs-studio/build64/plugins/obs-rtspserver/obs-rtspserver.so ./build-package/obs-rtspserver/bin/
          cp -r ./obs-studio/plugins/obs-rtspserver/data/* ./build-package/obs-rtspserver/data/
          cp -r ./obs-studio/plugins/obs-rtspserver/pkg ./pkg
          cp ./obs-studio/plugins/obs-rtspserver/LICENSE ./pkg/LICENSE.txt
          mkdir release
          cd ./build-package
          install_name_tool \
            -change /usr/local/opt/ffmpeg/lib/libavutil.56.dylib @rpath/libavutil.56.dylib \
            -change /usr/local/opt/ffmpeg/lib/libavfilter.7.dylib @rpath/libavfilter.7.dylib \
            -change /usr/local/opt/qt@5/lib/QtWidgets.framework/Versions/5/QtWidgets @rpath/QtWidgets.framework/Versions/5/QtWidgets \
            -change /usr/local/opt/qt@5/lib/QtGui.framework/Versions/5/QtGui @rpath/QtGui.framework/Versions/5/QtGui \
            -change /usr/local/opt/qt@5/lib/QtCore.framework/Versions/5/QtCore @rpath/QtCore.framework/Versions/5/QtCore \
            ./obs-rtspserver/bin/obs-rtspserver.so
          zip -r "../release/${{ env.MACOS_FILENAME }}.zip" "./"
      - name: 'Build obs-rtspserver package'
        working-directory: ${{ github.workspace }}/pkg
        run: |
            sed -i "" 's/%{VERSION}/${{ env.TAG_VERSION }}/g' ./obs-rtspserver.pkgproj
            packagesbuild -v --package-version "${{ env.TAG_VERSION }}" ./obs-rtspserver.pkgproj
            mv ./build/obs-rtspserver.pkg ../release/${{ env.MACOS_FILENAME }}.pkg
      - name: 'Publish files'
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.GIT_TAG }}-macos'
          path:  ${{ github.workspace }}/release/*
            
  make-release:
    name: 'Upload release'
    runs-on: [ubuntu-latest]
    needs: [windows_package, linux_build, macos_build]
    steps:
      - name: 'Get the version'
        shell: bash
        id: get_version
        run: |
          echo GIT_TAG=${GITHUB_REF/refs\/tags\//} >> $GITHUB_ENV
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ env.GIT_TAG }}-windows-all.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.GIT_TAG }}-windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ env.GIT_TAG }}-windows-all-installer.exe
          asset_name: ${{ env.PRODUCT_NAME }}-${{ env.GIT_TAG }}-windows-installer.exe
          asset_content_type: application/x-msdownload
      - name: 'Upload linux .tar.gz artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_TAG }}-linux/obs-rtspserver-${{ env.GIT_TAG }}-linux.tar.gz
          asset_name: obs-rtspserver-${{ env.GIT_TAG }}-linux.tar.gz
          asset_content_type: application/x-tar
      - name: 'Upload macos .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_TAG }}-macos/obs-rtspserver-${{ env.GIT_TAG }}-macos.zip
          asset_name: obs-rtspserver-${{ env.GIT_TAG }}-macos.zip
          asset_content_type: application/zip
      - name: 'Upload macos .pkg artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.GIT_TAG }}-macos/obs-rtspserver-${{ env.GIT_TAG }}-macos.pkg
          asset_name: obs-rtspserver-${{ env.GIT_TAG }}-macos.pkg
          asset_content_type: application/vnd.apple.installer+xml
